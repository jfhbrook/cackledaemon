#+TITLE: cackledaemon


https://docs.microsoft.com/en-us/powershell/scripting/developer/module/how-to-write-a-powershell-script-module?view=powershell-7

* Licensing
Cackledaemon is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Cackledaemon is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Cackledaemon.  If not, see <https://www.gnu.org/licenses/>.

#+BEGIN_SRC powershell :tangle ./dist/Cackledaemon.psd1
This file is part of Cackledaemon.

Cackledaemon is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Cackledaemon is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Cackledaemon.  If not, see <https://www.gnu.org/licenses/>.
#+END_SRC
* TODO Tasks
https://github.com/DTW-DanWard/PowerShell-Beautifier/blob/master/PowerShell-Beautifier.psd1

Tangling, README generation and so on

Powershell has frameworks for make-like task management, I should get down
* TODO Manifest
https://docs.microsoft.com/en-us/powershell/scripting/developer/module/how-to-write-a-powershell-module-manifest?view=powershell-7
#+BEGIN_SRC powershell :tangle ./dist/Cackledaemon.psd1
@{

RootModule = './dist/Cackledaemon.psm1'

ModuleVersion = '1.0'
GUID = '10d14360-ee5c-4363-bfe8-f4116a8ce764'

Author = 'Josh Holbrook'
Copyright = '(c) 2020 Josh Holbrook

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.'

Description = ''

# Modules that must be imported into the global environment prior to importing this module
# RequiredModules = @()

# Assemblies that must be loaded prior to importing this module
# RequiredAssemblies = @()

# Script files (.ps1) that are run in the caller's environment prior to importing this module.
# ScriptsToProcess = @()

# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess
# NestedModules = @()

# Functions to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no functions to export.
FunctionsToExport = @()

# Cmdlets to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no cmdlets to export.
CmdletsToExport = @()

# Variables to export from this module
VariablesToExport = '*'

# Aliases to export from this module, for best performance, do not use wildcards and do not delete the entry, use an empty array if there are no aliases to export.
AliasesToExport = @()

# List of all files packaged with this module
# FileList = @()

# Private data to pass to the module specified in RootModule/ModuleToProcess. This may also contain a PSData hashtable with additional module metadata used by PowerShell.
PrivateData = @{

    PSData = @{

        # Tags applied to this module. These help with module discovery in online galleries.
        # Tags = @('emacs')

        # A URL to the license for this module.
        # LicenseUri = ''

        # A URL to the main website for this project.
        ProjectUri = 'https://github.com/jfhbrook/cackledaemon'

        # A URL to an icon representing this module.
        # IconUri = ''

        # ReleaseNotes of this module
        # ReleaseNotes = ''

    }

}

# HelpInfo URI of this module
# https://docs.microsoft.com/en-us/powershell/scripting/developer/module/how-to-create-a-helpinfo-xml-file?view=powershell-7
# HelpInfoURI = ''

# Default prefix for commands exported from this module. Override the default prefix using Import-Module -Prefix.
# DefaultCommandPrefix = ''

}

#+END_SRC
* Working Directory
Cackledaemon needs a place to store logs and process metadata. That lives here.

#+BEGIN_SRC powershell :tangle ./dist/Cackledaemon.psm1
$workingDirectory = "{0}\cackledaemon" -f $env:APPDATA

function Ensure-WorkingDirectory {
  If (-not (Test-Path $dataDir)) {
    New-Item -Path $workingDirectory -ItemType directory
  }
}
#+END_SRC

* Cackledaemon Script Logging
#+BEGIN_SRC powershell :tangle ./dist/Cackledaemon.psm1
$logFile = Join-Path $workingDirectory "log.log"

function Write-Log {
  Param ([string]$message)

  $line = "CACKLEDAEMON: {0}" -f $message

  Add-Content $logFile -value $line
}
#+END_SRC
* TODO Emacs Daemon Management

https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/start-process?view=powershell-7
https://mcpmag.com/articles/2017/09/07/creating-a-balloon-tip-notification-using-powershell.aspx
https://github.com/proxb/PowerShell_Scripts/blob/master/Invoke-BalloonTip.ps1
https://community.spiceworks.com/topic/1874769-how-to-monitor-services-with-powershell
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-json?view=powershell-7
#+BEGIN_SRC powershell :tangle ./dist/Cackledaemon.psm1
function Start-EmacsDaemon {
  Start-Process
    -FilePath "emacs.exe"
    -ArgumentList "--daemon"
    -NoNewWindow
    -RedirectStandardOut $logFile
    -RedirectStandardError $logFile
}
#+END_SRC
* TODO Log Rotation
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_jobs?view=powershell-7
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/start-job?view=powershell-7
https://stackoverflow.com/questions/43593248/powershell-script-to-logrotate-logs
#+BEGIN_SRC powershell :tangle ./dist/Cackledaemon.psm1
#+END_SRC
